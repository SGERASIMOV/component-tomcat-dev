application:
  interfaces:
    management:
      configure-dbconnection: "bind(workflow#actions.configure-dbconnection)"
      deploy-app: "bind(workflow#actions.deploy-app)"
    output:
      app-host: "bind(workflow#result.app-host)"
      app-port: "bind(workflow#result.app-port)"
      
  bindings:
    - [workflow, wfService]
    - [workflow, secureStore]
    
  components:
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
    secureStore:
      type: reference.Service
      interfaces:
        keypair-store:
          get-keypair: receive-command(string id => object privateKey)
          
    workflow:
      type: workflow.Instance
      interfaces:
        #input:
        #  app-fork: configuration(string)
        #  app-branch: configuration(string)
          
        actions:
          configure-dbconnection: receive-command(string db-host, string db-port, string db-name, string db-user, string db-pass) 
          deploy-app: receive-command(string git-app-fork, string git-app-branch)
          
        result:
          app-host: publish-signal(list<string>)
          app-port: publish-signal(string)
       
        keypair-store:
          get-keypair: send-command(string id => object privateKey)
          
      required: [keypair-store]
          
      configuration:
        configuration.workflows:  
          launch:         
            steps:
              - provision-vm:
                  action: provisionAmazonVm
                  phase: provision
                  parameters:
                    roleName: default
                    hardwareId: m1.small
                    retryCount: 1
                    jcloudsProvider: aws-ec2
                    jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
                    jcloudsRegions: us-east-1
                    jcloudsNodeNamePrefix: component
                    jcloudsIdentity: "{$.identity}"
                    jcloudsCredential: "{$.credential}"
                    vmIdentity: ubuntu
                    imageId: us-east-1/ami-0fac7566
                    ec2SecurityGroup: default
                  output:
                    app-host: ips          
              - tomcat-install:
                  action: "chefsolo"
                  precedingPhases: [ provision ]
                  phase: tomcat-install
                  parameters:
                    roles: [ default ]
                    runList: ["recipe[apt]", "recipe[tomcat]"]
                    recipeUrl: "https://s3.amazonaws.com/ab-comp/tomcat/cookbooks.tar.gz"
                    jattrs:
                      java:
                        oracle:
                          accept_oracle_download_terms: true
                        install_flavor: oracle                   
            return:
              app-host:
                value: "{$.app-host}"
              app-port: 
                value: "8080"
 
          deploy-app:
            parameters:
              - git-app-fork:
                  description: git source fork
              - git-app-branch:
                  description: git source branch
                                
            steps:
               - deploy-app:
                  action: "chefsolo"
                  precedingPhases: [ tomcat-install ]
                  phase: deploy-app
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[tomcat-component]" ]
                    recipeUrl: "https://s3.amazonaws.com/ab-comp/tomcat/cookbooks.tar.gz"
                    jattrs:
                      tomcat-component:
                        deploy:
                          git:
                            url: "git://github.com/{$.git-app-fork}/petclinic.git"
                            revision: "{$.git-app-branch}"
          
          configure-dbconnection:
            parameters:
              - db-host:
                  description: DBMS host
              - db-port:
                  description: DBMS port
              - db-name:
                  description: DB name
              - db-user:
                  description: DB user
              - db-pass:
                  description: DB password
              
            steps:
              - configure-dbconnection:
                  action: "chefsolo"
                  parameters:
                    roles: [ default ]
                    runList: ["recipe[tomcat-component::configure-app]"]
                    recipeUrl: "https://s3.amazonaws.com/ab-comp/tomcat/cookbooks.tar.gz"
                    jattrs:
                      mysql:
                        host: "{$.db-host}"
                        port: "{$.db-port}"
                        db_name: "{$.db-name}" 
                        db_user: "{$.db-user}"
                        db_pass: "{$.db-pass}"

          destroy:
            steps:
              - destroy:
                  action: undeployEnv
