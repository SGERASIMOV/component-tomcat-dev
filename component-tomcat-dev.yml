application:
  configuration:
    input.quantity: "1"
    input.app-port: "8080" 
    input.instance-size: "m1.small"
    input.java-opts: "-Duser.timezone=UTC"
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-d39f8c6.tar.gz"
    input.operation_system: {image: "us-east-1/ami-1ba18d72", identity: ec2-user, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/messages"] }

  interfaces:
    input:
      quantity: "bind(workflow#input.quantity)"
      app-port: "bind(workflow#input.app-port)"
      java-opts: "bind(workflow#input.java-opts)"
      instance-size: "bind(workflow#input.instance-size)"
      recipe-url: "bind(workflow#input.recipe-url)"
      operation_system: "bind(workflow#input.operation_system)"
    management:
      build-app: "bind(workflow#actions.build-app)"
      deploy-libs: "bind(workflow#actions.deploy-libs)"
      deploy-war: "bind(workflow#actions.deploy-war)"
      reconfigure: "bind(workflow#actions.reconfigure)"
      manage-service: "bind(workflow#actions.manage-service)"
    output:
      app-hosts: "bind(workflow#result.app-hosts)"
      app-port: "bind(workflow#result.app-port)"
      logging-dashboard: "bind(workflow#result.logging-dashboard)"

  bindings:
    - [workflow, logger]

  components:
    logger:
      type: reference.Service
      interfaces:
        logger:
          logger-server: publish-signal(string)
    workflow:
      type: workflow.Instance
      interfaces:
        input:
          operation_system:
             type: configuration(map<string,object>)
             suggestions:
                 "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/messages"]}
                 "centos5": {image: "us-east-1/ami-beda31d7", identity: root, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/messages"]}
                 "centos": {image: "us-east-1/ami-bf5021d6", identity: root, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/messages"]}
                 "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/syslog"]}
                 "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu, log_paths: ["/var/log/tomcat6/catalina.out", "/var/log/syslog"]}
          app-port: configuration(string)
          quantity: configuration(string)
          java-opts: configuration(string)
          instance-size: configuration(string)
          recipe-url: configuration(string)
        actions:
          build-app: receive-command(string scm-provider, string git-uri, string app-branch => list<string> wars)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string uri, string path, object context-attrs, object context-nodes)
          reconfigure: receive-command(string java-opts)
          manage-service: receive-command(string service-action)
        logger:
          logger-server: consume-signal(string)
        result:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)
          logging-dashboard: publish-signal(string)

      required: [logger]

      configuration:
        configuration.triggers:
          input.quantity: update
        configuration.workflows:
          update: &update
            parameters:
              - app-port: &app-port
                  default: Tomcat port
              - quantity: &quantity
                  default: Number of servers
              - java-opts: &java-opts
                  default: "Tomcat's additional java options if needed"
            steps:
              - provision-vm:
                  action: provisionVmsWithLogging
                  phase: provision
                  parameters:
                    roleName: default
                    hardwareId: "{$.instance-size}"
                    targetQuantity: "{$.quantity}"
                    jcloudsNodeNamePrefix: component
                    vmIdentity: "{$.operation_system.identity}"
                    imageId: "{$.operation_system.image}"
                  output:
                    app-hosts: ips
                    logging-dashboard: logging-dashboard

              - enable-logging:
                  action: registerLogPath
                  phase: post-provision
                  precedingPhases: [provision]
                  parameters:
                    roles: [default]
                    paths: "{$.operation_system.log_paths}"

              - tomcat-install:
                  action: "chefsolo"
                  precedingPhases: [ provision, post-provision ]
                  phase: tomcat-install
                  parameters:
                    roles: [ default ]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"

            return:
              app-hosts:
                value: "{$.app-hosts}"
              app-port:
                value: "{$.app-port}"
              logging-dashboard:
                value: "{$.logging-dashboard}"
          launch: *update

          build-app:
            parameters:
              - scm-provider:
                  description: CVS git or subversion
                  default: "git"
              - git-uri:
                  description: source repository
              - app-branch:
                  description: source branch

            steps:
              - build-app:
                  action: "chefrun"
                  phase: build-app
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-build]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      scm:
                        provider: "{$.scm-provider}"
                        repository: "{$.git-uri}"
                        revision: "{$.app-branch}"
                  output:
                    chefAttrs: chefState
            return:
              wars:
                value: "{$.chefAttrs['*'][0].cookbook-qubell-build.artifacts}"
          deploy-libs:
            parameters:
              - lib-uri:
                  description: Necessary tomcat libs

            steps:
              - deploy-libs:
                  action: "chefrun"
                  phase: deploy-libs
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_libs]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      cookbook-qubell-tomcat:
                        lib_uri: "{$.lib-uri}"

          deploy-war:
            parameters:
              - uri:
                  description: WAR uri
              - path:
                  description: APP name
              - context-attrs:
                  description: Context parameters for context.xml
              - context-nodes:
                  description: Resources, environments, etc for context.xml

            steps:
              - deploy-war:
                  action: "chefrun"
                  phase: deploy-war
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_war]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      cookbook-qubell-tomcat:
                        war:
                          uri: "{$.uri}"
                          path: "{$.path}"
                        context:
                          context_attrs: "{$.context-attrs}"
                          context_nodes: "{$.context-nodes}"
          reconfigure:
            parameters:
              - java-opts:
                  description: "Tomcat's additional java options if needed"
            steps:
              - reconfigure-tomcat:
                  action: "chefrun"
                  phase: reconfigure-tomcat
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"
                        java_options: "{$.java-opts}"

          manage-service:
            parameters:
              - service-action:
                  description: "Run stop/start action on service"
            steps:
              - run-service-action:
                  action: "chefrun"
                  phase: "run-service-action"
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat::manage]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      base:
                        manage:
                          services: ["tomcat6"]
                          action: "{$.service-action}"

