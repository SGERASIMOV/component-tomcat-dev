## Tomcat Application Server
application:
  configuration:
# Root Application Interfaces.
# Here we describe a interfaces with pins and their bindings on components interfaces
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
    configuration.app-port: 8080
    configuration.java-opts: "-Duser.timezone=UTC"
    configuration.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-70d951d.tar.gz"
    compute-config.hardwareId: "c3.large"
    compute-config.imageId:    "ami-26971e4e"
    compute-config.login:      "root"
    compute-config.locationId: "us-east-1"
  interfaces:
    configuration:
      "*": "bind(workflow#input.*)"
    compute-config:
      hardwareId: "bind(compute#configuration.hardwareId)"
      imageId:    "bind(compute#configuration.imageId)"
      login:      "bind(compute#configuration.login)"
      locationId: "bind(compute#configuration.locationId)"
    compute-tomcat:
      "*": "bind(compute#compute.*)"
      app-host: "bind(workflow#result.app-host)"
      app-port: "bind(workflow#result.app-port)"
    scm-source:
      scm-provider:  "bind(workflow#scm-source.scm-provider)"
      scm-uri:     "bind(workflow#scm-source.scm-uri)"
      scm-branch:    "bind(workflow#scm-source.scm-branch)"
      service-action: "bind(workflow#scm-source.service-action)"
      lib-uri:       "bind(workflow#scm-source.lib-uri)"
      context-nodes: "bind(workflow#scm-source.context-nodes)"
      context-attrs: "bind(workflow#scm-source.context-attrs)"
      uri:           "bind(workflow#scm-source.uri)"
      path:          "bind(workflow#scm-source.path)"
      java-opts:     "bind(workflow#scm-source.java-opts)"
    source:
      lib-uri:       "bind(workflow#source.lib-uri)"
      context-nodes: "bind(workflow#source.context-nodes)"
      context-attrs: "bind(workflow#source.context-attrs)"
      uri:           "bind(workflow#source.uri)"
      path:          "bind(workflow#source.path)"
      java-opts:     "bind(workflow#source.java-opts)"
      

  components:
    workflow:
      type: workflow.Instance
      interfaces:
        input:
          app-port:     { type: configuration(int),          name: Tomcat listen port }
          java-opts:    { type: configuration(string),       name: JAVA_OPTS          }
          recipe-url:   { type: configuration(string),       name: Cookbooks url      }
        compute:
          networks:   consume-signal(map<string, map<string, string>>)
          exec:       send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:   send-command(string filename, bytes payload)
          get-file:   send-command(string filename => bytes payload)
        scm-source:
          scm-provider:  consume-signal(string)
          scm-uri:       consume-signal(string)
          scm-branch:    consume-signal(string)
          lib-uri:       consume-signal(list<string>)
          context-nodes: consume-signal(object)
          context-attrs: consume-signal(object)
          uri:           consume-signal(string)
          path:          consume-signal(string)
          java-opts:     consume-signal(string)
          service-action: consume-signal(string)
        source:
          lib-uri:       consume-signal(list<string>)
          context-nodes: consume-signal(object)
          context-attrs: consume-signal(object)
          uri:           consume-signal(string)
          path:          consume-signal(string)
          java-opts:     consume-signal(string)
        actions:
          update: receive-command()
        result:
          app-host: publish-signal(string)
          app-port: publish-signal(int)
      required: [ compute ]
      configuration:
        configuration.triggers:
          input.app-port:       update
          input.java-opts:      update
          input.recipe-url:     update
          compute.networks:     update
          scm-source.scm-provider:  build-app
          scm-source.scm-uri:       build-app
          scm-source.scm-branch:    build-app
          source.lib-uri:       deploy-libs
          source.context-nodes: deploy-war
          source.context-attrs: deploy-war
          source.uri:           deploy-war
          source.path:          deploy-war
          source.java-opts:     reconfigure
          scm-source.service-action: manage-service
        configuration.propagateStatus: [ update, build-app, deploy-libs, deploy-war, manage-service ]
        configuration.workflows:
          update: &update
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - install-tomcat:
                  action: "chefsolo"
                  precedingPhases: [ get-signals ]
                  parameters:
                    retryCount: 3
                    roles: [ compute ]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"
                        java_options: "{$.java-opts}"
              - reconfigure-tomcat:
                  action: "chefrun"
                  phase: reconfigure-tomcat
                  precedingPhases: [ install-tomcat ]
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"
                        java_options: "{$.java-opts}"
            return:
              app-host: { value: "{$.signals.compute.networks.public.ip}" }
              app-port: { value: "{$.app-port}" }

          launch: *update
          
          build-app: ### Additional workflow for build application with maven and return artefacts list
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - build-app: ### Action "chefrun" downloads cookbooks archive by specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefrun"
                  phase: build-app
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-build]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      scm:
                        provider:   "{$.signals.source.scm-provider}"
                        repository: "{$.signals.source.scm-uri}"
                        revision:   "{$.signals.source.scm-branch}"
                  output:
                    chefAttrs: chefState
            return: ### Values returned from workflow
              wars:
                value: "{$.chefAttrs['*'][0].cookbook-qubell-build.artifacts}"

          deploy-libs: ###  Additional Tomcat libraries installation workflow
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - deploy-libs:
                  action: "chefrun"
                  phase: deploy-libs
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_libs]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      cookbook-qubell-tomcat:
                        lib_uri: "{$.signals.source.lib-uri}"

          deploy-war: ### Additional workflow for deploy artifacts(local/web) in your Tomcat webapps
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - deploy-war:
                  action: "chefrun"
                  phase: deploy-war
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_war]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      cookbook-qubell-tomcat:
                        war:
                          uri:  "{$.signals.source.uri}"
                          path: "{$.signals.source.path}"
                        context:
                          context_attrs: "{$.signals.source.context-attrs}"
                          context_nodes: "{$.signals.source.context-nodes}"
          reconfigure: ### Additional workflow for reconfiguring Tomcat in case changing app-port and java-opts
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - reconfigure-tomcat:
                  action: "chefrun"
                  phase: reconfigure-tomcat
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"
                        java_options: "{$.signals.source.java-opts}"

          manage-service: ### ### Additional workflow for start/stop/restart service
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - run-service-action:
                  action: "chefrun"
                  phase: "run-service-action"
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat::manage]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      base:
                        manage:
                          services: ["tomcat6"]
                          action: "{$.signals.source.service-action}"



    compute:
      type: compute.Instance
  bindings:
   - [workflow, compute]
