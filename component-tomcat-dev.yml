application:
  configuration:
    input.quantity: "1"

  interfaces:
    input:
      quantity: "bind(workflow#input.quantity)"
    management:
      build-app: "bind(workflow#actions.build-app)"
      deploy-libs: "bind(workflow#actions.deploy-libs)"
      deploy-war: "bind(workflow#actions.deploy-war)"
    output:
      app-hosts: "bind(workflow#result.app-hosts)"
      app-port: "bind(workflow#result.app-port)"

  bindings:
    - [workflow, wfService]
    - [workflow, secureStore]

  components:
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
          execute-command: send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)
    secureStore:
      type: reference.Service
      interfaces:
        keypair-store:
          get-keypair: receive-command(string id => object privateKey)

    workflow:
      type: workflow.Instance
      interfaces:
        input:
          quantity: configuration(string)
        actions:
          build-app: receive-command(string scm-provider, string git-uri, string app-branch)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string war-uri, object environments, object resources)

        result:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

        keypair-store:
          get-keypair: send-command(string id => object privateKey)

      required: [keypair-store]

      configuration:
        configuration.triggers:
          input.quantity: update
        configuration.workflows:  
          update: &update
            parameters:
              - quantity: &quantity
                  default: Number of servers
            steps:
              - provision-vm:
                  action: provisionAmazonVm
                  phase: provision
                  parameters:
                    roleName: default
                    hardwareId: m1.small
                    targetQuantity: "{$.quantity}"
                    retryCount: 1
                    jcloudsProvider: aws-ec2
                    jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
                    jcloudsRegions: us-east-1
                    jcloudsNodeNamePrefix: component
                    jcloudsIdentity: "{$.identity}"
                    jcloudsCredential: "{$.credential}"
                    vmIdentity: ubuntu
                    imageId: us-east-1/ami-0fac7566
                    ec2SecurityGroup: default
                  output:
                    app-hosts: ips

              - tomcat-install:
                  action: "chefsolo"
                  precedingPhases: [ provision ]
                  phase: tomcat-install
                  parameters:
                    roles: [ default ]
                    runList: ["recipe[tomcat-component]"]
                    recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-6044542.tar.gz"
            return:
              app-hosts:
                value: "{$.app-hosts}"
              app-port:
                value: "8080"
          launch: *update

          build-app:
            parameters:
              - scm-provider:
                  description: CVS git or subversion
                  default: "git"
              - git-uri:
                  description: source repository
              - app-branch:
                  description: source branch

            steps:
              - build-app:
                  action: "chefrun"
                  phase: build-app
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[build]" ]
                    recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-6044542.tar.gz"
                    jattrs:
                      scm:
                        provider: "{$.scm-provider}"
                        repository: "{$.git-uri}"
                        revision: "{$.app-branch}"

          deploy-libs:
            parameters:
              - lib-uri:
                  description: Necessary tomcat libs

            steps:
              - deploy-libs:
                  action: "chefrun"
                  phase: deploy-libs
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[tomcat-component::deploy_libs]" ]
                    recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-6044542.tar.gz"
                    jattrs:
                      tomcat-component:
                        lib_uri: "{$.lib-uri}"

          deploy-war:
            parameters:
              - war-uri:
                  description: URL to war file
              - environments:
                  description: Env parameters for context.xml
              - resources:
                  description: Resources for context.xml

            steps:
              - deploy-war:
                  action: "chefrun"
                  phase: deploy-war
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[tomcat-component::deploy_war]" ]
                    recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-6044542.tar.gz"
                    jattrs:
                      tomcat-component:
                        war_uri: "{$.war-uri}"
                      context:
                        environments: "{$.environments}"
                        resources: "{$.resources}"

          destroy:
            steps:
              - destroy:
                  action: undeployEnv
